#!/usr/bin/env ruby

require 'fuffa'
require 'optparse'
require 'uri'

options = {
  url: '',
  wordlist: '',
  port: 80,
  fuzz_word: 'FUZZ',
  output: 'default',
  exclude: []
}

option_parse = OptionParser.new do |opt|
  opt.on '-u', '--url URL', 'url to be fuzzed' do |url|
    abort 'Not a valid url.' unless url =~ URI::regexp
    options[:url] = url
  end

  opt.on '-w', '--wordlist WORDLIST', 'wordlist used to fuzz' do |wl|
    abort 'Wordlist provided doesn\'t exist' unless File.exists? wl
    abort 'Wordlist given is not readable. Check permissions and retry.' unless File.readable? wl
    options[:wordlist] = wl
  end

  opt.on '-h', '--help' do
    abort opt
  end
  
  opt.on '-p', '--port', 'set port on which webserver is running (default: 80)' do |port|
    abort "Invalid port specified." unless (1024..65535).include?(options[:port])
    options[:port] = port.to_i
  end
  
  opt.on '-fz', '--fuzz-word FUZZWORD', 'set the fuzz word (default: FUZZ)' do |fuzz_word|
    options[:fuzz_word] = fuzz_word unless fuzz_word.empty?
  end
  
  opt.on '-e', '--exclude RESPONSE_LIST', 
  'set response codes separated by comma that need to be filtered out (default: none)' do |codes|
    code_list = Fuffa::Utils.check_response_codes(codes)
    options[:exclude] = code_list unless code_list.nil?
  end
  
  opt.on '-f', '--out-format OUTPUT', "'default' or 'json'" do |output|
    options[:output] = 'json' unless output != 'json'
  end
  
end
option_parse.parse!

if options[:wordlist].empty? || options[:url].empty?
  abort option_parse.help
end

abort "Url doesn\'t contain \'#{options[:fuzz_word]}\' keyword" unless options[:url].include? options[:fuzz_word]

fuzzer = Fuffa::Fuzzer.new(options)
fuzzer.fuzz()
puts Fuffa::Utils.get_table(fuzzer)
